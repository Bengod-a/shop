generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  user
  admin
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String?
  name      String?
  role      Role       @default(user)
  image     String?
  enabled   Boolean    @default(true)
  orders    Order[]
  carts     Cart[]
  addresses Address[]
  date      DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  favorite  Favorite[]
}

model Order {
  id        Int              @id @default(autoincrement())
  products  ProductOnOrder[]
  cartTotal Float
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  orderby   User             @relation(fields: [orderbyId], references: [id])
  orderbyId Int
  amount    Int
  status    String
  currency  String?
  address   Address?         @relation(fields: [addressId], references: [id])
  addressId Int?
}

model Address {
  id          Int     @id @default(autoincrement())
  name        String
  phonenumber Int
  address     String
  province    String
  amphure     String
  tambon      String
  zipcode     Int
  user        User    @relation(fields: [userId], references: [id])
  userId      Int
  orders      Order[] @relation()
}

model Product {
  id          Int              @id @default(autoincrement())
  title       String           @unique @db.VarChar(255)
  description String
  price       Float
  sold        Int              @default(0)
  quantity    Int
  OrderItems  ProductOnOrder[]
  cartItems   ProductOncart[]
  images      Image[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  category    Category?        @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  favorite    Favorite[]
}

model ProductOnOrder {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  count     Int
  price     Float
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Cart {
  id        Int             @id @default(autoincrement())
  products  ProductOncart[]
  cartTotal Float
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  orderby   User            @relation(fields: [orderbyId], references: [id])
  orderbyId Int
}

model ProductOncart {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  count     Int
  price     Float
}

model Image {
  id         Int      @id @default(autoincrement())
  asset_id   String
  public_id  String
  url        String
  secure_url String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
}

model Favorite {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}
